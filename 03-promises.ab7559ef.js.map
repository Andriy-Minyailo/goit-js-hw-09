{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA6CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,IAjDZO,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAyBC,GACvBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACrB,KAAMF,EAAMG,OAAS,GAAKF,EAAKE,OAAS,GAAKD,EAAOC,MAAQ,GAE1D,YADAtB,EAAAuB,OAAOC,QAAQ,6BAGjB,IAAIC,EAAcC,OAAOP,EAAMG,OAC3BK,EAAW,EACfC,YAAW,WACT1B,EAAcyB,EAAUF,GAAaI,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACrDJ,EAAAuB,OAAOQ,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,OAC3D6B,QAAMC,IAAI,uBAAwCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEzD+B,OAAM,SAAAL,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAAuB,OAAOa,QAAQ,sBAAuCJ,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,OAC1D6B,QAAMC,IAAI,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAG7D,IAAMiC,EAAYC,aAAY,WACpBX,IAAaD,OAAOL,EAAOC,QAInCG,GAAeC,OAAON,EAAKE,OAEzBpB,EADFyB,GAAY,EACcF,GAAaI,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACrDJ,EAAAuB,OAAOQ,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,OAC3D6B,QAAMC,IAAI,uBAAwCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEzD+B,OAAM,SAAAL,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAAuB,OAAOa,QAAQ,sBAAuCJ,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,OAC1D6B,QAAMC,IAAI,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,KAX3DmC,cAAcF,E,GAadjB,EAAKE,M,GACRH,EAAMG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener(\"submit\", oncreatePromise);\n\nfunction oncreatePromise(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  if (!(delay.value >= 0 && step.value >= 0 && amount.value > 0)) {\n    Notify.warning('Please, enter valid data!')\n    return;\n  }\n  let resultDelay = Number(delay.value);\n  let position = 1;\n  setTimeout(() => {\n    createPromise(position, resultDelay).then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    const idInteval = setInterval(() => {\n          if (position === Number(amount.value)) { \n          clearInterval(idInteval);\n          return;\n      }\n      resultDelay += Number(step.value);\n      position += 1;\n        createPromise(position, resultDelay).then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n          .catch(({ position, delay }) => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          })\n       }, step.value); \n    }, delay.value)\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n  } else {\n      reject({ position, delay });\n  } \n  })\n};\n\n// ----------------------------Version 2.0--------------------------------\n// function oncreatePromise(event) {\n//   event.preventDefault();\n//   const { delay, step, amount } = event.currentTarget.elements;\n//   if (delay.value < 0 || step.value < 0 || amount.value <= 0) {\n//     Notify.warning('Please, enter valid data!')\n//     return;\n//   }\n//   let resultDelay = Number(delay.value);\n//   for (let i = 1; i <= amount.value; i += 1) {\n// createPromise(i, resultDelay).then(({ position, delay }) => {\n//       Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//       .catch(({ position, delay}) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//     resultDelay += Number(step.value);\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay) \n//   })\n// };\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","Notify","warning","resultDelay","Number","position1","setTimeout","then","param","success","concat","console","log","catch","failure","idInteval","setInterval","clearInterval"],"version":3,"file":"03-promises.ab7559ef.js.map"}